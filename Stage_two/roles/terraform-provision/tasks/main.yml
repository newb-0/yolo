---
- name: Check if Terraform is installed
  command: terraform version
  register: terraform_version
  changed_when: false
  failed_when: false
  tags: [terraform, provision]

- name: Install Terraform if not present
  block:
    - name: Download Terraform
      get_url:
        url: "https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip"
        dest: "/tmp/terraform.zip"
        mode: "0644"

    - name: Install unzip
      apt:
        name: unzip
        state: present

    - name: Extract Terraform
      unarchive:
        src: "/tmp/terraform.zip"
        dest: "/usr/local/bin"
        remote_src: yes
        mode: "0755"
        creates: "/usr/local/bin/terraform"
  when: terraform_version.rc != 0
  tags: [terraform, install]

- name: Initialize Terraform
  command: terraform init
  args:
    chdir: "{{ terraform_dir }}"
  register: terraform_init
  changed_when: "'Terraform has been successfully initialized' in terraform_init.stdout"
  tags: [terraform, provision]

- name: Plan Terraform configuration
  command: terraform plan -out=terraform.tfplan
  args:
    chdir: "{{ terraform_dir }}"
  register: terraform_plan
  changed_when: terraform_plan.rc == 0
  tags: [terraform, provision]

- name: Apply Terraform configuration
  command: terraform apply -auto-approve terraform.tfplan
  args:
    chdir: "{{ terraform_dir }}"
  register: terraform_apply
  changed_when: terraform_apply.rc == 0
  tags: [terraform, provision]

- name: Display Terraform outputs
  command: terraform output -json
  args:
    chdir: "{{ terraform_dir }}"
  register: terraform_outputs
  changed_when: false
  tags: [terraform, provision]

- name: Show Terraform outputs
  debug:
    msg: "{{ terraform_outputs.stdout | from_json }}"
  when: terraform_outputs.stdout != ""
  tags: [terraform, provision]
